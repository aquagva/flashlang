---

# Документация Языка Flash

## Введение во Flash

Flash — это простой, пошаговый язык программирования, разработанный для интерактивных сценариев, обработки данных и управления логикой. Он идеален для тех, кто делает первые шаги в программировании, создавая текстовые приключения, калькуляторы или простые симуляции.

Ключевые особенности Flash:
* **Простота:** Чёткий и понятный синтаксис.
* **Построчное выполнение:** Код выполняется строка за строкой.
* **Гибкое управление потоком:** Возможность переходить к любой строке кода.

Все команды во Flash пишутся **только маленькими буквами (в нижнем регистре)**.

---

## 1. Основы Flash: Переменные (Ячейки Памяти)

Во Flash данные хранятся в **ячейках памяти**, которые можно представить как именованные "коробки" для хранения информации.

* **Имя ячейки:** Уникальное слово, используемое для доступа к данным. Должно быть одним словом (без пробелов).
    * Примеры: `имя`, `счет`, `здоровьеИгрока`, `сообщение`.
* **Тип данных:** Ячейки могут хранить:
    * **Числа:** Целые числа (`10`, `500`) или десятичные дроби (`3.14`, `0.5`).
    * **Текст:** Последовательность символов (например, `привет`, `да`, `нет`).

---

## 2. Команды Языка Flash

Ниже представлены все доступные команды языка Flash с подробными описаниями и примерами использования.

### 2.1. `store [значение] in [имя_ячейки]`

* **Назначение:** Присваивает `значение` указанной `имени_ячейки`. Если ячейки с таким именем не существует, она будет создана.
* **Параметры:**
    * `[значение]`: Литерал (число или текст), который нужно сохранить. Если это текст, он должен быть одним словом. Для текста с пробелами требуется его передача как единой сущности, чего текущая версия Flash не поддерживает напрямую без кавычек. Рекомендуется использовать текст без пробелов.
    * `[имя_ячейки]`: Имя ячейки, в которую будет сохранено значение.
* **Примеры:**
    ```flash
    store 100 in points      // Сохранить число 100 в ячейке 'points'
    store player1 in current_player // Сохранить текст 'player1' в ячейке 'current_player'
    store true in game_over   // Сохранить текст 'true' (как строку) в ячейке 'game_over'
    ```

### 2.2. `show [значение_или_имя_ячейки]`

* **Назначение:** Выводит `значение` или содержимое `имя_ячейки` в консоль.
* **Параметры:**
    * `[значение_или_имя_ячейки]`:
        * Литерал: текст (например, `Привет, мир!`), число (например, `42`). Если это текст с пробелами, он будет выведен как есть, если это единственное, что идет после `show`.
        * Имя ячейки: Содержимое указанной ячейки будет выведено.
* **Примеры:**
    ```flash
    show "Добро пожаловать!" // Выведет "Добро пожаловать!"
    show points           // Выведет текущее значение из ячейки 'points'
    show current_player   // Выведет содержимое ячейки 'current_player'
    ```

### 2.3. `get input for [имя_ячейки] with prompt [текст_сообщения]`

* **Назначение:** Выводит `текст_сообщения` в консоль как приглашение для пользователя, приостанавливает выполнение программы, ожидает ввода текста или числа от пользователя, а затем сохраняет введенные данные в указанную `имя_ячейки`.
* **Параметры:**
    * `[имя_ячейки]`: Имя ячейки, куда будет сохранено введенное пользователем значение.
    * `[текст_сообщения]`: Сообщение, которое будет показано пользователю как приглашение к вводу.
* **Примеры:**
    ```flash
    get input for userName with prompt Введите ваше имя:
    get input for age with prompt Сколько вам лет?:
    ```

### 2.4. `calculate [операция] to [имя_результирующей_ячейки] from [значение1/ячейка1] and [значение2/ячейка2]`

* **Назначение:** Выполняет математическую операцию над двумя числами и сохраняет числовой результат в указанную `имя_результирующей_ячейки`.
* **Параметры:**
    * `[операция]`: Тип математической операции. Допустимые значения:
        * `sum` (сложение)
        * `difference` (вычитание)
        * `product` (умножение)
        * `quotient` (деление)
    * `[имя_результирующей_ячейки]`: Имя ячейки, в которую будет записан результат операции.
    * `[значение1/ячейка1]`: Первое число для операции. Может быть либо литералом (числом), либо именем ячейки, содержащей число.
    * `[значение2/ячейка2]`: Второе число для операции. Может быть либо литералом (числом), либо именем ячейки, содержащей число.
* **Важно:** Оба операнда должны быть числами. Попытка деления на ноль приведет к ошибке выполнения.
* **Примеры:**
    ```flash
    store 10 in num1
    store 5 in num2
    calculate sum to total from num1 and num2    // total = 15
    show total

    calculate difference to remaining from 20 and num2 // remaining = 15
    show remaining

    calculate product to area from 7 and 8       // area = 56
    show area

    calculate quotient to average from 100 and 4 // average = 25
    show average

    // Пример с ошибкой (деление на ноль)
    store 0 in zero_val
    calculate quotient to bad_result from 10 and zero_val // Вызовет ошибку
    ```

### 2.5. `if [значение1/ячейка1] [условие] [значение2/ячейка2]`

* **Назначение:** Начинает блок условного кода. Команды внутри этого блока будут выполнены только в том случае, если указанное условие истинно.
* **Параметры:**
    * `[значение1/ячейка1]`: Первое значение для сравнения (литерал или содержимое ячейки).
    * `[условие]`: Тип сравнения. Допустимые значения:
        * `isequal` (равно)
        * `isgreater` (больше)
        * `isless` (меньше)
    * `[значение2/ячейка2]`: Второе значение для сравнения (литерал или содержимое ячейки).
* **Важно:**
    * Для `isgreater` и `isless` оба сравниваемых значения должны быть числами.
    * `isequal` работает как для чисел, так и для текста.
    * Каждый `if` должен быть закрыт соответствующим `endif`.
* **Примеры:**
    ```flash
    store 18 in userAge
    if userAge isgreater 16
      show Вы достаточно взрослый для игры!
    endif

    store "admin" in userRole
    if userRole isequal "admin"
      show Добро пожаловать, администратор.
    endif
    ```

### 2.6. `else`

* **Назначение:** Используется **внутри** блока `if...endif`. Команды, расположенные после `else` и до `endif`, будут выполнены, **если условие в соответствующем `if` оказалось ложным**.
* **Важно:** `else` всегда должен находиться между `if` и `endif`.
* **Пример:**
    ```flash
    get input for choice with prompt Нравится ли вам солнце? (да/нет):
    if choice isequal да
      show Отлично!
    else
      show Жаль.
    endif
    ```

### 2.7. `endif`

* **Назначение:** Завершает блок `if` или `if/else`. **Каждый `if` должен иметь ровно один соответствующий `endif`**. Отсутствие `endif` или их неправильное расположение приведет к ошибкам выполнения.
* **Примеры:** (См. примеры для `if` и `else`)

### 2.8. `goto [номер_строки]`

* **Назначение:** Безусловно передает управление выполнением программы к указанной `номеру_строки`. Это позволяет создавать циклы, повторно выполнять блоки кода или переходить к определенным точкам программы.
* **Параметры:**
    * `[номер_строки]`: Целое число, указывающее на номер строки в вашем коде. Нумерация строк начинается с `1` для первой строки.
* **Важно:** Используйте `goto` осторожно. Неправильное использование может привести к бесконечным циклам (когда программа повторяется без возможности выхода) или к "прыжкам", которые делают код трудночитаемым. Убедитесь, что `номер_строки` действительно существует в вашей программе.
* **Пример (простой счетчик):**
    ```flash
    show Начинаем отсчет...
    store 1 in counter
    // Строка 3: начало_цикла
    show Текущее значение:
    show counter
    calculate sum to counter from counter and 1
    if counter isless 5
      goto 3 // Возвращаемся к строке 3 (повторяем цикл, пока counter < 5)
    endif
    show Отсчет завершен.
    ```

---

## 3. Структура Кода Flash

* **Каждая команда на новой строке:** Каждая инструкция Flash должна занимать отдельную строку.
* **Нижний регистр:** Все ключевые слова команд (`store`, `show`, `if`, `goto` и т.д.) и условия (`isequal`, `isgreater`, `isless`) должны быть написаны маленькими буквами.
* **Комментарии:** Вы можете добавлять комментарии для лучшей читаемости кода. Любая строка, начинающаяся с `//`, будет проигнорирована интерпретатором.
    ```flash
    // Это однострочный комментарий.
    show "Привет!" // Комментарий в конце строки.
    ```
* **Пустые строки:** Пустые строки между командами игнорируются, но не должны содержать никаких символов.

---

## 4. Примеры Скриптов Flash

### 4.1. Скрипт "Угадай число"

```flash
show --- Игра "Угадай число" ---
show Я загадал число от 1 до 10. Попробуй угадать!

store 7 in secretNumber
store 0 in guessCount
store 0 in userGuess

// Начало игрового цикла (строка 7)
game_loop:
  calculate sum to guessCount from guessCount and 1 // Увеличиваем счетчик попыток

  get input for userGuess with prompt Введите вашу догадку:

  if userGuess isequal secretNumber
    show Правильно! Вы угадали число!
    show Вам потребовалось
    show guessCount
    show попыток.
    goto 25 // Переход к концу игры
  else
    show Неправильно.
    if userGuess isless secretNumber
      show Ваша догадка слишком низка.
    else
      show Ваша догадка слишком высока.
    endif
  endif

show // Пустая строка для разделения вывода
goto 7 // Возвращаемся к началу игрового цикла (строка 7)

// Конец игры (строка 25)
show --- Игра окончена! ---
```

### 4.2. Скрипт "Простой калькулятор"

```flash
show --- Простой калькулятор Flash ---

// Начало основного цикла калькулятора (строка 3)
calculator_start:
  get input for num1 with prompt Введите первое число:
  get input for num2 with prompt Введите второе число:
  get input for operation with prompt Выберите операцию (sum, diff, prod, quot):

  if operation isequal sum
    calculate sum to result from num1 and num2
    show Результат:
    show result
  else
    if operation isequal diff
      calculate difference to result from num1 and num2
      show Результат:
      show result
    else
      if operation isequal prod
        calculate product to result from num1 and num2
        show Результат:
        show result
      else
        if operation isequal quot
          if num2 isequal 0
            show Ошибка: Деление на ноль невозможно!
          else
            calculate quotient to result from num1 and num2
            show Результат:
            show result
          endif
        else
          show Ошибка: Неизвестная операция. Используйте sum, diff, prod или quot.
        endif
      endif
    endif
  endif

  show // Пустая строка для разделения вывода
  get input for continue_calc with prompt Хотите выполнить еще одну операцию? (да/нет):

  if continue_calc isequal да
    show --- Перезапуск калькулятора ---
    goto 3 // Возврат к началу калькулятора (строка 3)
  else
    show --- Калькулятор завершил работу ---
  endif
```

---

Это полная документация для языка Flash. Используйте её, чтобы в полной мере раскрыть потенциал твоего языка!